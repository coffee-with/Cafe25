package Assignment;

import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.util.Scanner;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import java.io.BufferedReader;
import java.io.IOException;

public class Project {

	public static void main(String[] args) throws IOException, ParseException {
		
		System.out.println("전기차 충전소 장소는 아래와 같습니다.");
		System.out.println("=====================================================================");

		//공공데이터 포털 사이트의 URL 과 service 키에 대해 아래의 내용에 직접 작성해도 되지만 보기좋게 하기 위해 따로 변수로 선언. 
		String apiURL = "https://api.odcloud.kr/api/EvInfoServiceV2/v1/getEvSearchList";
		String serviceKey = "C0kNgX3vPFCReXu2H8J14eW6E2jjmxmIrpTzvfNWfJrk%2BoPXUUxBbZGOfzmNyZ4R6VavBKB05aR0Ez6DbCHBsA%3D%3D"; 
		

		StringBuilder urlBuilder = new StringBuilder(apiURL); /* URL */
		urlBuilder.append("?" + URLEncoder.encode("serviceKey", "UTF-8") + "=" + serviceKey); /* Service Key */
		urlBuilder.append("&" + URLEncoder.encode("pageNo=1", "UTF-8")); /* 페이지번호 */
		urlBuilder.append("&" + URLEncoder.encode("numOfRows=10", "UTF-8")); /* 한 페이지 결과 수 */
		urlBuilder.append("&" + URLEncoder.encode("dataType", "UTF-8") + "="
				+ URLEncoder.encode("JSON", "UTF-8")); /* 요청자료형식(JSON) */

		URL url = new URL(urlBuilder.toString()); // url 클래스로 객체생성 (절대 경로로 지정)
		
		//openConnection 메서드를 이용한 연결, URL 주소의 원격 객체에 접속한 뒤, 통신할 수 있는 URLConnection 객체를 리턴. 
		HttpURLConnection conn = (HttpURLConnection) url.openConnection();
		conn.setRequestMethod("GET"); // 주의 할 점이 스펠링이 틀리면 계속 오류 발생!! 
		conn.setRequestProperty("Content-type", "application/json");
//		System.out.println("Response code: " + conn.getResponseCode());
		BufferedReader rd;  // * Buffer 란 입출력 속도 향상을 위해서 데이터를 일시적으로 메모리 영역의 한곳에 모아두는 것 (효율성 향상)
		if (conn.getResponseCode() >= 200 && conn.getResponseCode() <= 300) {
			rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
		} else {
			rd = new BufferedReader(new InputStreamReader(conn.getErrorStream()));
		}
		StringBuilder sb = new StringBuilder(); 
		// 문자열을 더해 나갈 때 새로운 객체를 매번 생성하는 것이 아니라 기존 데이터 값에 추가해 나가는 방식으로 속도가 빠르다. 
		String line;
		while ((line = rd.readLine()) != null) {
			sb.append(line);
		}
		
		//연결해제 부분 
		rd.close();
		conn.disconnect();
		

		JSONParser jsonParser = new JSONParser(); // 제이슨 변환 객체
		JSONObject jsonObject = (JSONObject) jsonParser.parse(sb.toString()); // 위에서 만들어진 JSON 객체는 JSONObject 클래스를 사용해서 저장. 
		JSONArray arr = (JSONArray) jsonObject.get("data");

		for (Object one : arr) {
			JSONObject ob = (JSONObject) one;
			System.out.print("ID: " + ob.get("csId")+ "\t");
			System.out.print(" 충전소명: " + ob.get("csNm") + "\t");
			System.out.print(" 주소: " + ob.get("addr") + "\t");
			System.out.print(" 충전기명: " + ob.get("cpNm") + "\t");
			System.out.print(" 충전기타입(1:완속,2:급속)" + ob.get("chargeTp") + "\t");
			System.out.print(" 충전방식 : " + ob.get("cpTp") + "(1:B타입(5핀), 2:C타입(5핀), 3:BC타입(5핀),4:BC타입(7핀),5:DC차데모, 6:AC3상, 7:DC콤보, 8:DC차데모+DC콤보, 9:DC차데모+AC3상, 10:DC차데모+DC콤보, AC3상)" + "\t");
			System.out.print(" 업데이트 시간: " + ob.get("statUpdatetime") + "\t");
			System.out.println(" 충전기상태(1:충전가능, 2:충전중, 3:고장/점검, 4:통신장애, 5:통신미연결): " + ob.get("cpStat") + "\t");

		}
	
		System.out.println("========================================================================");

		System.out.println("확인을 완료하셨습니까? 그렇다면 아래에 주소를 입력하여 위치를 검색하세요.");
		System.out.println();

		// 스캐너를 사용하여 주소를 직접 입력할 수 있도록 오픈. 
		Scanner scanner = new Scanner(System.in);
		System.out.print("주소를 입력하세요 : ");
		String address = scanner.nextLine();
		scanner.close();		
		
	}

}
